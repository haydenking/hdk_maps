---
title: "CountyMap"
format: html
editor: visual
---

This file creates and reads in the county_map(\_ag) shapefile and the MSA dataset

```{r}
wd = "/Users/Hayden/Maps/"
library(dplyr)
library(readxl)
library(usmap)
library(sf)
```

#Read in pre-saved county_map or county_map_ag, MSAs and state_map

```{r}
#https://www.census.gov/geographies/reference-files/time-series/demo/metro-micro/historical-delineation-files.html
#older version so it has CT historical counties
MSAs = read_xls(paste0(wd,"MSAs.xls")) |>
  rename(st_FIPS = `FIPS State Code`,
         co_FIPS = `FIPS County Code`,
         area_type = `Metropolitan/Micropolitan Statistical Area`,
         metro_name = `CBSA Title`,
         cbsa_code = `CBSA Code`) |>
  mutate(fips = paste0(st_FIPS, co_FIPS),
         area_type = case_when(area_type == "Metropolitan Statistical Area" ~ "metro", area_type == "Micropolitan Statistical Area" ~ "micro", T ~ NA))
#at some point I should make an MSA map because running st_union every time I want an MSA map takes forever

  state_map <- us_map("states")

  county_map_ag = st_read(paste0(wd, "county_map_ag/county_map_ag.shp"))
  
  county_map = st_read(paste0(wd, "county_map/county_map.shp"))
```

```{r}
MSAs_crosswalk = MSAs |>
  select(cbsa_code, metro_name, fips)

# write.csv(MSAs_crosswalk, "MSAs_crosswalk.csv")
```

#Code below is for creating the county_map shapefiles.

##Create county_map

```{r}
county_map <- us_map("counties") |>
  filter(!abbr == "CT") |> #remove ct
  rename(state = full,
         geometry = geom) |>
  select(fips, county, abbr, state)

ct_map = st_read(paste0(wd, "cb_2018_us_county_20m/cb_2018_us_county_20m.shp")) |>
  filter(STATEFP == "09") #CT
ct_map <- st_transform(ct_map, st_crs(county_map)) |>
    mutate(abbr = "CT",
           state = "Connecticut",
           NAME = paste0(NAME, " County")) |>
  rename(fips = GEOID, 
         county = NAME) |>
  select(fips, county, abbr, state)

county_map = rbind(county_map, ct_map)
  
  #don't use the centroids from this because they take into account water area causing those around the Great Lakes to be off
  areas = read.delim(paste0(wd,"2020_Gaz_counties_national.txt"), stringsAsFactors = FALSE) |> #older so that it has CT historical counties
    filter(GEOID < 57000) |> #remove territories
    rename(sqmi = ALAND_SQMI) |> #land area measured in square miles
    mutate(fips = sprintf("%05d", GEOID)) |> #turn lat and long into coordinate pair
    select(fips, sqmi)
  county_map = left_join(county_map, areas, by = "fips") #I just get the areas from here
  
#using this source for 2020 pops because the census bureau official estimates use planning regions for CT
  county_pops20 = read_delim(paste0(wd, "county_pop_centroids_2020.txt"), delim = ",") |>
    mutate(fips = paste0(STATEFP, COUNTYFP)) |>
    rename(pop = POPULATION) |>
    select(fips, pop)
  
  county_map = left_join(county_map, county_pops20) 
  
#historical county pops from here: https://www.census.gov/data/datasets/time-series/demo/popest/2010s-counties-total.html
  #2010-2019 pops
county_pops1019 = read_xlsx(paste0(wd,"county_pops10-19.xlsx")) |>
  mutate(county = str_remove(county, "^\\."),
         county =str_split(county, ", ")) |>
  unnest_wider(county, names_sep = "_") |>
  rename(county = county_1,
         state = county_2)

county_map = left_join(county_map, county_pops1019, by = c("county", "state"))

#2020-2023 pops from here: https://www.census.gov/data/tables/time-series/demo/popest/2020s-counties-total.html
#these data use CT planning regions
  #maybe read this directly from the internet for easy updating?
county_pops_recent = read_xlsx(paste0(wd,"county_pops20-23.xlsx")) |>
  mutate(county = str_remove(county, "^\\."),
         county =str_split(county, ", ")) |>
  unnest_wider(county, names_sep = "_") |>
  rename(county = county_1,
         state = county_2)

county_map = left_join(county_map, county_pops_recent, by = c("county", "state"))

  county_map <- county_map |>
      mutate(county = str_replace(county, "city", "City"), #for VA independent cities
             pop20 = if_else(is.na(pop20), pop, pop20) #pop is pop20, but this fixes it for CT counties
             )
```

##Only run this section for Ag CountyMap (USDA data) because this creates Ag Districts for Alaska and Merges Maui and Kalawao Counties in HI
```{r}
datapath_farm = paste0(wd, "Data/Farm/")
agdistricts_ak = read.csv(paste0(datapath_farm, "agdistricts_ak.csv")) |>
  select(-X, -fips)

county_map <- county_map |> #we don't really care about historical populations as much
   select(fips, county, abbr, state, sqmi, pop)

county_map_ak = county_map |>
    filter(abbr == "AK" | county %in% c("Maui County", "Kalawao County")) |>
    mutate(county = str_remove(county, " Census Area"),
         county = str_remove(county, " and Borough"),
         county = str_remove(county, " Borough"),
         county = str_remove(county, " Municipality"),
         county = str_remove(county, " City"),
         agdistrict = case_when(county %in% c("Kenai Peninsula") ~ "Kenai Peninsula",
                                  county %in% c("Anchorage", "Matanuska-Susitna", "Chugach", "Copper River") ~ "Matanuska-Susitna-Anchorage",
                                  county %in% c("Juneau", "Ketchikan Gateway", "Sitka", "Yakutat", "Haines", "Prince of Wales-Hyder", "Skagway", "Wrangell", "Petersburg", "Hoonah-Angoon") ~ "Southeast",
                                  county %in% c("Aleutians East", "Aleutians West", "Lake and Peninsula", "Kodiak Island", "Bristol Bay", "Dillingham", "Bethel", "Nome", "Northwest Arctic", "North Slope", "Kusilvak") ~ "Southwest & West",
                                  county %in% c("Fairbanks North Star", "Denali", "Southeast Fairbanks", "Yukon-Koyukuk") ~ "Tanana Valley",
                                  county %in% c("Maui County", "Kalawao County") ~ "Maui County"
                                  ))

county_map_ak = county_map_ak |>
  left_join(agdistricts_ak, by = "agdistrict") |>
  mutate(main_county = if_else(is.na(main_county), agdistrict, main_county)) #just to fix the HI counties

county_map_ak <- county_map_ak |>
  mutate(fips = case_when(county == main_county ~ fips,
                          county == "Aleutians East" ~ "02010", #"Aleutian Islands" doesn't have a fips code but this is what USDA uses for this ag district
                          T ~ NA),
         county = paste0(agdistrict , " Ag District")) |>
  group_by(agdistrict) |>
  mutate(fips = na.omit(fips)) |>
  group_by(fips, county) |> #grouping by fips and county is just so they don't get dropped
  summarize(geometry = st_union(geometry),
              sqmi = sum(sqmi),
              pop = sum(pop)) |> #I kind of lazily tacked on the Maui-Kalawao merge to the Alaska Ag District thing
  mutate(abbr = if_else(str_detect(county, "Maui"), "HI", "AK"),
         state = if_else(str_detect(county, "Maui"), "Hawaii", "Alaska"),
         county = if_else(str_detect(county, "Maui"), "Maui and Kalawao Counties", county))

county_map <- county_map |>
  filter(abbr != "AK" & !(county %in% c("Maui County", "Kalawao County")))

county_map = rbind(county_map, county_map_ak)
```

#Add Centroids
```{r}
county_map$centroid = st_centroid(county_map$geometry)
county_map <- county_map |>
  mutate(x = st_coordinates(centroid)[, 1],
         y = st_coordinates(centroid)[, 2],
         x = if_else(county == "Kenai Peninsula Ag District", x+40000, x), #fix Alaska centroids
         y = if_else(county == "Southwest & West Ag District", y-210000, y),
         x = if_else(county == "Southeast Ag District", x - 50000, x),
         y = if_else(county == "Southeast Ag District", y +50000, y),
         name = paste0(county, ", ", abbr)) |>
  select(-centroid)
```

```{r}
#For saving normal county_map (migration data, CT historical counties)
#st_write(county_map, "county_map/county_map.shp", delete_dsn = TRUE)

#For saving county_map_ag (usda data)
#st_write(county_map, "county_map_ag/county_map_ag.shp", delete_dsn = TRUE)
```

#This creates the MSA_map shapefile from county_map
```{r}
MSA_map = county_map |>
  left_join(MSAs, by = "fips") |>
  mutate(metro_name = if_else(is.na(metro_name), name, metro_name)) |>
  group_by(cbsa_code, metro_name) |>
  summarize(
    across(contains("pop"), ~ sum(.x)),
    geometry = st_union(geometry),
    sqmi = sum(sqmi),
    fips = list(fips)
  ) |>
  ungroup() |>
  mutate(fips = sapply(fips, function(x) paste(x, collapse = ", "))) #because sf doesn't support list columns
```

```{r}
#For saving MSA_map
#st_write(MSA_map, "MSA_map/MSA_map.shp", delete_dsn = TRUE)
```
