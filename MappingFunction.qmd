---
title: "Map"
format: html
editor: visual
---
```{r}
library(tidyverse)
library(readxl)
library(scales)
library(ggplot2)
library(sf)
library(ggfx)
library(ggrepel)
#map with per capita shading and bubbles
#aggregate by state and then use state map options
```
#create_inset
```{r}
create_inset <- function(map, level, style = c("top", "bottom"), n, inset_cutoff, cutoff_column, dollar, unit, netmigration, logratio, scale_center, inset_title_custom) {
  #people don't like inverted ratios, so maybe I don't need that option
  if(style == "top" & min(map$Value, na.rm = T) < 0){
    dollar = paste0("+",dollar)
  }
  
  if(level == "county"){
    map <- map |>
      mutate(name = case_when(fips == "57001" ~ "Overseas",
                            fips == "57003" ~ "Puerto Rico",
                            fips == "57005" ~ "Military Deployment",
                            fips == "57007" ~ "U.S. Virgin Islands",
                            T ~ name
                            ))
  }
  
  inset_data <- map |>
    st_drop_geometry() |>
        filter(cutoff >= inset_cutoff,
           !is.na(Value),
           !is.na(name))

  if(logratio){
    inset_data <- inset_data |>
      mutate(Value = exp(Value))
  }
  
  if (style == "top") {
    inset_data <- inset_data |>
      arrange(desc(Value))
  } else {
    inset_data <- inset_data |>
      arrange(Value)
  }
  
  inset_data <- inset_data |>
    slice(1:n) |>
    mutate(
      rank = as.character(row_number()),
      rank = if_else(as.numeric(rank) < 10, paste0(rank, ".   "), paste0(rank, ". "))
    )
  
    inset_data <- inset_data |>
      mutate(label = paste0(rank, name, ": ",dollar,sapply(Value, shorten), unit))

    #took out invert functionality because people don't like it
    # inset_data <- inset_data |>
    #   mutate(invert = (Value < 1),
    #          Value = if_else(invert, 1/Value, Value),
    #     label = paste0(rank, name, ": ", dollar, if_else(invert, "1:",""),sapply(Value, shorten),if_else(invert,"", ":1"), unit))
    if(level == "county"){
        counties = "Counties"
      }else if (level == "MSA") {
        counties = "Counties/MSAs"
      } else if(level == "state"){
        counties = "States"
      }
    if (is.na(inset_title_custom)[1]) {
      if (logratio) {
        top = paste0("Highest ", n, " ")
        bottom = paste0("Lowest ", n, " ")
      } else if (!netmigration) {
        top = paste0("Top ", n," ")
        bottom = paste0("Bottom ", n," ")
      } else{
        top = "Highest Net In-Migration"
        bottom = "Highest Net Out-Migration"
        counties = "" #it would be too long
      }
    } else{
      top = inset_title_custom[1]
      bottom = inset_title_custom[2]
      # Make sure top and bottom end in a space
      top = if_else(str_detect(top, " $"), top , paste0(top, " "))
      bottom = if_else(str_detect(bottom, " $"), bottom , paste0(bottom, " "))
    }
  
  title_line =  paste0(if_else(style == "top", top, bottom), counties, 
                      if_else(inset_cutoff > 0, paste0(" (min ", shorten(inset_cutoff), " ", cutoff_column, ")"), ""), 
                      ":\n")
  new_inset <- paste0(title_line, paste(inset_data$label, collapse = "\n"), "\n")
  
  return(new_inset)
}
```

#add_theme
```{r}
#having issues with high max_bubble_size (> ~30), but that may be unavoidable due to space constraints
add_theme <- function(plot, title, palette, subtitle, font_size, caption, inset_text, breaks, bubbles, max_bubble_size, continental) {
  font = "Arial"
  
  #I fit the caption vertical alignment for max_bubble_size 20. It seems like about 10 (changed to 8 currently for troubleshooting) max bubble size fully submerges the caption by one line. A line is about 0.025 units tall iirc
  # caption_line_height = 0.025
  # bubble_size_adjustment = if_else(bubbles, ((20-max_bubble_size)/8)*caption_line_height, 0)
  # #for each 5 breaks, there is a new line, adjust caption height for that
  # if(!is.na(breaks)[1]){
  #   break_adjustment = floor(-0.01+length(breaks)/5)*(0.75*caption_line_height) #this needs more fine tuning
  # } else{
  #     break_adjustment = 0
  #   }
  
  # if(bubbles){
  #   title_height = 1
  # } else{
  #   title_height = 1.03
  # }
  
  title_height = 1.05 #we have more vertical space now
  
  if(continental) {
    title_alignment = 0.5
    left_margin = 0.025
  } else{
    title_alignment = 0.551
    left_margin = 0.128
  }
  subtitle_offset = 0.06*(font_size/36) # Vertical adjustment for subtitle
  if(continental){continental_offset = 0.14}else{continental_offset = 0}
  
  plot <- plot +
    theme_minimal(base_family = font) +
    theme(
      legend.title = element_blank(),
      legend.text = element_text(size = 12, color = palette$text_color ,face = "bold"),
      #legend.position = "bottom",
      legend.position = c(left_margin, -0.02),
      legend.justification = "left",
      legend.direction = "horizontal",
      legend.key.width = unit(if_else(is.na(breaks[1]), 1.5, 0.5), "cm"),
      legend.key.height = unit(0.5, "cm"),
      panel.grid = element_blank(),
      panel.background = element_rect(fill = palette$background_color, color = NA), # #f1e0cf
      plot.background = element_rect(fill = palette$background_color, color = NA),
      axis.title = element_blank(),
      axis.text = element_blank(),
      axis.ticks = element_blank(),
      #legend.box.margin = margin(if_else(continental, 100, 40), 0, if_else(continental, -40, 0), if_else(continental, 0, 83)),
      legend.box.margin = margin(0, 0, 0, 0),
      plot.margin = margin(0, if_else(continental, -20, -20), 0, if_else(continental, -20, -110))
    ) +
    coord_sf(clip = "off") +
    annotation_custom(grid::textGrob(
      inset_text,
      x = unit(if_else(continental, 0.52, 0.57), "npc"),
      y = unit(-0.12 - continental_offset, "npc"),
      hjust = 0,
      vjust = 0,
      gp = grid::gpar(
        fontsize = 11,
        fontface = "bold",
        col = palette$text_color, fontfamily = font
      )
    )) +
    annotation_custom(grid::textGrob(
      title,
      gp = grid::gpar(
        fontsize = font_size,
        fontface = "bold",
        col = palette$title_color, fontfamily = font
      ),
      x = unit(title_alignment, "npc"),
      y = unit(title_height, "npc"),
      hjust = 0.5
    )) +
    annotation_custom(grid::textGrob(
      "@hdk_maps",
      gp = grid::gpar(fontsize = 12, col = palette$title_color, fontface = "bold", fontfamily = font),
      x = unit(title_alignment, "npc"),
      y = unit(title_height - subtitle_offset - if_else(is.na(subtitle), 0, 0.034), "npc"),
      hjust = 0.5
     )) +
    annotation_custom(grid::textGrob(
      caption,
      gp = grid::gpar(fontsize = 10, col = palette$text_color, fontfamily = font),
      x = unit(left_margin, "npc"),
      y = unit(if_else(continental, -0.26, -0.15), "npc"),
      hjust = 0,
      vjust = 0
    ))
    # annotation_custom(grid::textGrob(
    #   caption,
    #   gp = grid::gpar(fontsize = 10, col = palette$text_color, fontfamily = font),
    #   x = unit(left_margin, "npc"),
    #   y = unit(if_else(bubbles,-0.24 + bubble_size_adjustment, -0.21 - break_adjustment) - continental_offset, "npc"),
    #   hjust = 0,
    #   vjust = 0
    # ))
  if (!is.na(subtitle)) {
    plot <- plot +
      annotation_custom(grid::textGrob(
        subtitle,
        gp = grid::gpar(fontsize = font_size/1.75, col = palette$title_color, fontface = "bold", fontfamily = font),
        x = unit(title_alignment, "npc"),
        y = unit(title_height - subtitle_offset, "npc"),
        hjust = 0.5
      ))
  }
  return(plot)
}
```

#handle_per
```{r}
handle_per <- function(map, source, per, subtitle) {
  
  if (per %in% c("capita", "capita_total") ) {
      map <- map |> 
        mutate(Value = Value / avg_pop)
      #this code isn't very good, will rewrite
      # if(median(abs(map$Value),na.rm = T) > 1/100000) {
      #   map <- map |> 
      #     mutate(Value = Value *100000)
      #   subtitle <- if_else(is.na(subtitle), "Rate per 100k per year", subtitle)
      # } else if(median(abs(map$Value),na.rm = T) > 1/1000){
      #   map <- map |>
      #     mutate(Value = 1000 * Value)
      #   subtitle <- if_else(is.na(subtitle), "Rate per 1,000 per year", subtitle)
      # }
    } else if (per == "sqmi") {
    map <- map |>
      mutate(Value = Value / sqmi)
  } else if (per == "acre") {
    map <- map |>
      mutate(Value = Value / (sqmi * 640))
  } else if (per != "" & per != "year") {
    map <- map |>
      mutate(Value = Value / !!rlang::sym(per))
  }
  
  return(list(map = map, subtitle = subtitle))
}
```

#bubble_map
```{r}
bubble_map <- function(map, state_map, level, max_bubble_size, palette, borders, dollar, unit, region, netmigration, scale_center) {
  #computes midpoint color
  midpoint_rgb <- function(mid_color, saturated_color) {
    col1 <- col2rgb(mid_color)
    col2 <- col2rgb(saturated_color)
    mid_rgb <- 0.7 * col1 + 0.3 * col2  # Biased the mix towards the mid_color so you can see the bubbles better
    rgb(mid_rgb[1], mid_rgb[2], mid_rgb[3], maxColorValue = 255)
  }
  
  if(!is.na(scale_center) & scale_center != 0){
    stop("Scale center not at 0 for bubbles makes no sense.")
  }
  
  low_fill_color <- midpoint_rgb(palette$mid_color, palette$low_color)
  high_fill_color <- midpoint_rgb(palette$mid_color, palette$high_color)
  
  map <- map |>
    mutate(Value = if_else(Value == 0 & is.na(scale_center), NA, Value),
           abs_value = abs(Value))
  min <- min(map$abs_value, na.rm = TRUE)
  max <- max(map$abs_value, na.rm = TRUE)
  min_bubble_size <- max_bubble_size * min / max
  
  if(is.na(scale_center)){
    map <- map |> 
      mutate(Type = ifelse(abs_value >= 0, "Has Value", "No Value"))
  }else if(netmigration) {
    map <- map |> 
      mutate(Type = ifelse(Value >= 0, "Net In-Migration", "Net Out-Migration"))
  } else if(scale_center == 0){
    map <- map |> 
      mutate(Type = ifelse(Value >= 0, "Positive", "Negative"))
  }
  
    plot <- ggplot(data = map) +
        with_shadow(
      geom_sf(
        aes(fill = Type),
        color = ifelse(borders, "white", NA), size = 0.1, show.legend = FALSE
      ),
      x_offset = 3, y_offset = 3, sigma = 3, color = "grey70"
    ) +
    scale_size_continuous(
      range = c(min_bubble_size, max_bubble_size),
      name = "",
      breaks = compute_breaks(map$abs_value),
      labels = append_unit(dollar, unit)
    ) + 
    geom_point(
      data = map |> filter(abs_value > 0),
      aes(x = x, y = y, size = abs_value, color = Type),
      alpha = 0.5
    )
    
    if (!is.null(state_map)) {
    plot <- plot +
      geom_sf(data = state_map, color = "black", fill = NA, size = 0.1)
  }
  if(!is.na(region)){
    plot <- plot +
      geom_sf(
        data = region,
        fill = palette$highlight_color,
        color = "white"
      )
  }
    
  if(is.na(scale_center)) {
    plot <- plot + 
      scale_fill_manual(
      values = c("Has Value" = high_fill_color, "No Value" = palette$na_color),
      na.value = palette$na_color) +
      scale_color_manual(
        values = c("Has Value" = palette$high_color), na.translate = FALSE)
  } else if(netmigration){
    plot <- plot +
      scale_fill_manual(
      values = c("Net In-Migration" = high_fill_color, "Net Out-Migration" = low_fill_color),
      na.value = palette$na_color) +
      scale_color_manual(
        values = c("Net In-Migration" = palette$high_color, "Net Out-Migration" = palette$low_color), na.translate = FALSE)
  } else if(scale_center == 0){
    plot <- plot +
      scale_fill_manual(
      values = c("Positive" = high_fill_color, "Negative" = low_fill_color),
      na.value = palette$na_color) +
      scale_color_manual(
        values = c("Positive" = palette$high_color, "Negative" = palette$low_color), na.translate = FALSE)
  }
  
  if(is.na(scale_center)){
    plot <- plot +
      guides(color = "none", size = guide_legend(override.aes = list(color = palette$high_color)))
  }else if (scale_center == 0) {
    max_break <- max(compute_breaks(map$Value))
    max_value <- max(map$Value, na.rm = TRUE)
    legend_bubble_size <- max_bubble_size * sqrt(max_break / max_value)
    plot <- plot + guides(color = guide_legend(override.aes = list(size = legend_bubble_size)))
  }
  return(plot)
}
```

#choropleth_map
```{r}
#find powers 10 times 1, 2, and 5 closest to 0.25, 0.5, 0.75, 0.9, 0.95 quantiles?
#figure out how to dynamically set text to a lighter color if the fill is dark for state level map
choropleth_map <- function(map, state_map, level, breaks, labels_manual, palette, borders, dollar, unit, region, scale_center, logratio, show_endpoints) {
  
  if (!is.na(breaks[1])) {
    if (!is.na(scale_center)) {
      if(scale_center == "median"){
        scale_center = signif(median(map$Value, na.rm = T),2)
      }
      breaks <- unique(breaks)
      breaks <- c(-abs(breaks), abs(breaks))
      breaks <- sort(breaks)
      breaks <- breaks + scale_center
      
      if(logratio){
        if(scale_center != 0){
          cat("Warning: scale center not at 0 makes no sense for log ratio.")
        }
        breaks = exp(breaks)
        map <- map |>
          mutate(Value = exp(Value))
      }
      breaks <- c(round_to_sigfigs(min(map$Value, na.rm = TRUE), 2, "floor"),
                  breaks,
                  round_to_sigfigs(max(map$Value, na.rm = TRUE), 2, "ceiling"))
    } else {
      breaks <- c(round_to_sigfigs(min(map$Value, na.rm = TRUE), 2, "floor"),
                  breaks,
                  round_to_sigfigs(max(map$Value, na.rm = TRUE), 2, "ceiling"))
    
      breaks <- sort(breaks)
  }
    
  } else{
    num_data_points = map |>
      filter(!is.na(Value), Value != 0) |>
      nrow()
    num_breaks = max(4, min(7, ceiling(num_data_points^0.5)))
    breaks = pretty(map$Value, n = num_breaks) #is there a way to keep 0 from being a break while keeping the breaks the same size? Not really a fan of pretty(), might make my own auto-breaks
  }
  
  if(is.na(scale_center)){ #I don't have code to remove empty breaks for two-sided because I don't want asymmetrical breaks so it'd be more complicated
    breaks = remove_empty_breaks(map, breaks)
  }
  if (is.na(labels_manual[1])) { #for two-sided breaks centered at 0, add a + sign
      formatted_labels <- paste0(dollar,
                                   sapply(head(breaks, -1), shorten),
                                   " to ",
                                   dollar,
                                   sapply(breaks[-1], shorten),
                                   unit)
        if (!show_endpoints) { #if we have dollar unit this probably doesn't work but I'll deal with that when it comes up
          formatted_labels[length(formatted_labels)] <- paste0(">",str_remove(formatted_labels[length(formatted_labels)], " to .*"), unit)

          formatted_labels[1] <- paste0("<",str_remove(formatted_labels[1], ".* to "))
        }
      } else {
        formatted_labels <- labels_manual
      }
  map <- map |>
      mutate(Category = cut(
        Value,
        breaks = breaks,
        include.lowest = TRUE,
        labels = formatted_labels
      ))
    color_column = "Category"
    if(!is.na(scale_center)){
      #length(breaks) should be even
      low_palette <- seq_gradient_pal(palette$low_color, palette$mid_color)(seq(0, 1, length.out = length(breaks)/2))
      high_palette <- seq_gradient_pal(palette$mid_color, palette$high_color)(seq(0, 1, length.out = length(breaks)/2))
      color_palette <- c(low_palette[-length(low_palette)], high_palette)
    }else{
      color_palette <- seq_gradient_pal(palette$mid_color, palette$high_color)(seq(0, 1, length.out = length(breaks) - 1))
    }
  
  plot <- ggplot(data = map) + 
      with_shadow(
        geom_sf(aes(fill = Category), color = ifelse(borders, "white", NA), size = 0.1),
        x_offset = 3, y_offset = 3, sigma = 3, color = "grey70"
      ) + scale_fill_manual(
      values = color_palette,
      na.value = palette$na_color,
      name = "",
      na.translate = TRUE,
      labels = c(formatted_labels, "No Data") #I'd like this to be first rather than last but apparently that's hard
    )
    if(!is.null(state_map)){
        plot <- plot +
      geom_sf(data = state_map, color = "black", fill = NA, size = 0.1) #can't seem to make borders bold no matter how high I make the size
    }
  
  if(level == "state"){
  plot = add_state_labels(plot, map, palette)
  }
  
  if(!is.na(region)){
    plot <- plot +
      geom_sf(
        data = region,
        fill = palette$highlight_color,
        color = "white"
      )
    }
  return(list(plot = plot, breaks = breaks))
}
```

#add_state_labels
```{r}
add_state_labels <- function(plot, map, palette){
      #yes this is a mess but it works for now.

    adjustments <- tibble::tibble( #these adjustments are needed for labels but aren't good bubble locations
  abbr = c("NH", "MA", "CT"),
  x_adj = c(0, 50000, -35000),
  y_adj = c(90000, 0, -30000)
)

map <- map |>
  left_join(adjustments, by = "abbr") |>
  mutate(
    x = coalesce(x + x_adj, x),
    y = coalesce(y + y_adj, y)
  ) |>
  select(-x_adj, -y_adj)

      plot <- plot + geom_text(data = map %>% filter(!(abbr %in% c( "DC","DE", "RI", "NJ", "HI", "VT", "CT", "MA", "NH"))), aes(x = x, y = y, label = lapply(Value, shorten)), size = 4, fontface = "bold", color = palette$text_color) +
  geom_text_repel(data = map %>% filter(abbr %in% c("DE", "HI")),
                           aes(x = x, y = y, label = lapply(Value, shorten)),
                           box.padding = 1, size = 4, fontface = "bold",color = palette$text_color, nudge_x = 100, nudge_y = -100) +
        geom_text_repel(data = map %>% filter(abbr == "RI"),
                           aes(x = x, y = y, label = lapply(Value, shorten)),
                           box.padding = 1, size = 4, fontface = "bold",color = palette$text_color, nudge_x = 100, nudge_y = -50) +
        geom_text_repel(data = map %>% filter(abbr == "VT"),
                           aes(x = x, y = y, label = lapply(Value, shorten)),
                           box.padding = 1, size = 4, fontface = "bold",color = palette$text_color, nudge_x = -100, nudge_y = 100) +
    geom_text_repel(data = map %>% filter(abbr == "NJ"),
                           aes(x = x, y = y, label = lapply(Value, shorten)),
                           box.padding = 1, size = 4, fontface = "bold",color = palette$text_color, nudge_x = 100, nudge_y = -100) +
        geom_text_repel(data = map %>% filter(abbr == "CT"),
                           aes(x = x, y = y, label = lapply(Value, shorten)),
                           box.padding = 1, size = 4, fontface = "bold",color = palette$text_color, nudge_x = 0, nudge_y = -50) +
        geom_text_repel(data = map %>% filter(abbr == "NH"),
                           aes(x = x, y = y, label = lapply(Value, shorten)),
                           box.padding = 1, size = 4, fontface = "bold",color = palette$text_color, nudge_x = -100, nudge_y = 100) +
        geom_text_repel(data = map %>% filter(abbr == "MA"),
                           aes(x = x, y = y, label = lapply(Value, shorten)),
                           box.padding = 1, size = 4, fontface = "bold",color = palette$text_color, nudge_x = 100, nudge_y = 100)
      return(plot)
}
```

###map
```{r}
#trim aleutian islands off of alaska?
#netmigration only really affects text for bubbles and inset, so get rid of it and just have custom text parameters
map <- function(data, map, state_map = NULL, title, source, font_size = NA, years = NA, bubbles = TRUE, unit = "", per = "", max_bubble_size = NA, continental = FALSE, borders = FALSE, graphicspath, palette = list(), inset_cutoff = -1000000000, cutoff_column = "Value", breaks = NA, na_to_0 = FALSE, caption_manual = "", labels_manual = NA, inset_style = "top", subtitle = NA, region_fips = NA, cbsa = NA, migration_type = NA, merge_MSAs = F, scale_center = NA, logratio = F, netmigration = F, inset_title_custom = NA, dpi = 300, show_endpoints = F) {
  
  palette = set_palette(palette)
  
  if (all(nchar(map$fips) == 2)) {
  level <- "state"
} else if (all(nchar(map$fips) == 5)) {
  level <- "county"
} else if("cbsa_code" %in% colnames(map)){
  level <- "MSA"
} else {
  stop("Error: The map doesn't contain valid FIPS codes or CBSA codes.")
}
  
  #years should be a list of years. It can be specified 2019:2022 for example
    first_year <- min(years)
    last_year <- max(years)
  if(logratio){ #log ratio: use with migration type = "net", supply breaks as log of the positive ratios you want as breaks ex. c(log(1.1), log(1.3), log(1.5))
    per = "" #anything else would be silly
    unit = ":1"
  }
    
  if(is.na(font_size)){
    font_size = min(36*38/nchar(title), 36) #the plot is a bit more than 40 characters wide at font size 36, but at font size 36 I'd still want some breathing room so 38 characters is when I start reducing the font size
    cat("Auto font size: ", font_size,"\n")
  }
    
  #highlight region can be specified with region_fips or cbsa code
  if (is.na(region_fips)[1] & !is.na(cbsa)) { #find region_fips from cbsa
    MSAs <- read_csv("MSAs_crosswalk.csv")
    if(level == "state"){
      stop("CBSA code supplied, but map is at the state level.")
    }
    region_fips = MSAs |>
      filter(cbsa_code == cbsa) |>
      pull(fips) |>
      as.character()
  }
  if(!is.na(migration_type)){
    if(migration_type == "net"){
      scale_center = 0
      netmigration = T
    }
    data = get_migration_data(data, region_fips, migration_type, logratio)
  }
    
    caption_manual <- ifelse(!str_detect(caption_manual, "\n$") & caption_manual != "", str_c(caption_manual, "\n"), caption_manual) #make sure manual caption ends in \n

    #this could be generalized a bit
  if (source == "USDA") {
    caption <- paste0("Source: USDA Agriculture Census\n")
  } else if (source == "IRS") {
    if(is.na(years)[1]){
      first_year = 2012 #default
      last_year = 2022 #previously I was including the lower endpoint for IRS data but that's just semantics
      years = 2012:2022
      cat("Using default years for IRS data: 2012-2022\n")
    }
    if(last_year > 2021){
       caption_manual = paste0(caption_manual, "Connecticut data is ",first_year,"-",2021,"\n")
    }
    caption <- paste0("Source: ",first_year, "-", last_year," IRS Migration Data\n")
  } else if (source == "ACS") {
    if(is.na(years)[1]){
      first_year = 2011 #default
      last_year = 2020
      years = 2011:2020
      cat("Using default years for ACS data: 2011-2020\n")
    }
    caption <- paste0("Source: ",first_year, "-", last_year," ACS Migration Data\n")
  } else {
    caption = ""
  }
  caption <- paste0(caption, caption_manual, "Created in R")
    
  if (per == "capita" & length(years) > 1 | per == "year") {
    num_years_ct = length(years[years < 2022]) #we don't have post-2021 data for CT due to the switch to planning regions, but I should write this better for post-2021 maps, but that is difficult without requiring that the data argument be un-aggregated by year
    num_years_notct = length(years)
    data <- data |>
      mutate(
        num_years = if_else(substr(fips, 1, 2) == "09" & level != "state", num_years_ct, num_years_notct),
        #CT
        Value = Value / num_years
      )
    subtitle <- if_else(is.na(subtitle) &
                          per == "year", "Rate per year", subtitle)
  }
  if(is.na(scale_center) & min(data$Value, na.rm = T) < 0){
    cat("Warning: negative Values in data\n")
  }
  
  if (!is.na(region_fips)[1]) {
      region = map |>
        filter(fips %in% region_fips) |>
        st_union()
  } else{
    region = NA
  }
    
    data <- data |> #the only two columns we will use
      select(fips, Value)
    
  if(level == "MSA"){ #this option is for if data are already merged by MSA, otherwise county_map is supplied for map and merge_MSAs is true
    map = map |> #for MSA map we need to join by name because of non-metro counties
      full_join(data, by = join_by(metro_name == name)) |>
      rename(name = metro_name) #streamline this later
  } else{
    map <- map |>
      full_join(data, by = "fips")
  } #Switched to full_join here to keep PR so that it can be in the inset at least. I don't think it will mess with the mapping.

    map <- map |>
      mutate(cutoff = !!rlang::sym(cutoff_column))
    
  if(merge_MSAs){
    if(level == "county"){ #merge_by_MSA merges a county_map by MSA
      map = merge_by_MSA(map, region_fips)
      level = "MSA"
    } else if(level == "state"){
      stop("State map cannot be merged by MSA.")
    } else if(level == "MSA"){
      cat("Map merged by MSA already supplied, ignoring Merge_MSA argument.")
    }
  }
  
  if (na_to_0) {
    map <- map |>
      mutate(Value = replace_na(Value, 0))
  } 

  dollar <- ""
  if (str_detect(unit, "\\$")) {
    dollar <- "$"
    unit <- str_remove(unit, "\\$")
  } else if (unit == "%") {
    map <- map |>
      mutate(Value = 100 * Value)
  } else if (!str_detect(unit, "[/:]")) {#ratios and rates don't have the space before
    unit <- paste0(" ", unit)
  }
  
    if(per %in% c("capita", "capita_total", "year")){ #use capita_total to divide by population over a period of time but not year (ex. for cumulative % population changes over multiple years)
      if(is.na(years)[1]){
        stop("Specify which years the data are for.")
      }
      pop_cols <- paste0("pop", substr(years, 3, 4))
      map <- map %>%
        rowwise() %>%
        mutate(
          avg_pop = mean(c_across(all_of(pop_cols)), na.rm = T), #at worst we're chopping off 2 years at the end so it isn't a big deal for now
          avg_pop = ifelse(is.na(avg_pop) | avg_pop == 0, pop, avg_pop), # Default to "pop" if missing
          pop = avg_pop #if pop is the inset cutoff this matters
        ) %>%
        ungroup()
    }
  
  per_capita_result <- handle_per(map, source, per, subtitle)
  map <- per_capita_result$map
  subtitle <- per_capita_result$subtitle

  if(!is.na(scale_center) & inset_style != "hidden"){
    inset_style = "split" #only looking at one way wouldn't make sense
  }
  
  if (inset_style == "hidden") {
    inset_text <- ""
  } else if (inset_style %in% c("top", "bottom")) {
    inset_text <- create_inset(map, level, inset_style, 10, inset_cutoff, cutoff_column, dollar, unit, netmigration, logratio, scale_center, inset_title_custom)
  } else if (inset_style == "split") {
    top <- create_inset(map, level, "top", 5, inset_cutoff, cutoff_column, dollar, unit, netmigration, logratio, scale_center, inset_title_custom)
    bottom <- create_inset(map, level, "bottom", 5, inset_cutoff, cutoff_column, dollar, unit, netmigration, logratio, scale_center, inset_title_custom)
    inset_text = paste0(top, bottom)
  }
  
    if (continental) { #filter out AK and HI after inset
    if(level != "MSA"){
    map <- map |>
      filter(!abbr %in% c("AK", "HI", "PR")) 
    } else{ #MSA map doesn't have abbr column, so we filter out non-lower 48 areas differently
     map <- map |>
      filter(!str_detect(name, ", HI"),
             !str_detect(name, ", AK"),
             !str_detect(name, ", PR"))  
    }
    state_map <- state_map |>
      filter(!abbr %in% c("AK", "HI", "PR"))
  }
  
  map <- map |>
    filter(!st_is_empty(geometry))
  
    #better code has been written
  if(is.na(max_bubble_size) & bubbles){
  map <- map |>
    mutate(abs_value = abs(Value))
  max = max(map$abs_value, na.rm = T)
  bubble <- map |>
    select(abs_value) |>
    mutate(normalized_bubble_size = abs_value/max,
           normalized_bubble_size = replace_na(normalized_bubble_size, 0))
  inflation_factor = 3000/sum(bubble$normalized_bubble_size) #3000 was arrived at by trial and error
  max_bubble_size = sqrt(max(bubble$normalized_bubble_size)*inflation_factor) #bubble size is in terms of radius not area
  cat("Auto max bubble size: ", max_bubble_size, "\n")
  }
  if (bubbles) {
    plot <- bubble_map(map, state_map, level, max_bubble_size, palette, borders, dollar, unit, region, netmigration, scale_center)
  } else {
    choropleth <- choropleth_map(map, state_map, level, breaks, labels_manual, palette, borders, dollar, unit, region, scale_center, logratio, show_endpoints)
    plot = choropleth$plot
    breaks = choropleth$breaks
  }
  
  plot <- add_theme(plot, title, palette, subtitle, font_size, caption, inset_text, breaks, bubbles, max_bubble_size, continental)
  
  if (!is.na(breaks[1])) {
    plot <- plot +
      theme(legend.key = element_rect(fill = NA, color = "black", size = 0.5))
  }
  
  filepath = paste0(graphicspath, str_remove_all(title, " "), source, ".jpg")
  ggsave(filename = filepath, plot = plot, dpi = dpi, width = 10, height = 10) #set dpi to 100 for a cool retro look
  
  system2("open", filepath)
}
```

#helper functions
```{r}
compute_breaks <- function(values) {
  max_value <- max(values, na.rm = TRUE)
  min_value <- max(min(values , na.rm = TRUE),1)
  
  # Get the powers of 10 between min_value and max_value
  powers_of_10 <- 10^(ceiling(log10(min_value)):floor(log10(max_value)))
  
  # Check if max_value exceeds the highest power of 10 by more than 5x
  if (max_value > 5 * max(powers_of_10)) {
    powers_of_10 <- c(powers_of_10, 5 * max(powers_of_10))
  } else if(max_value > 2 * max(powers_of_10)){
    powers_of_10 <- c(powers_of_10, 2 * max(powers_of_10))
  }
  
  # Combine the values and return unique, sorted breaks
  breaks <- sort(unique(powers_of_10))
  if (length(breaks) > 4) {
    breaks <- tail(breaks, 4)
  }
  return(breaks)
}
remove_empty_breaks <- function(map, breaks){
  data <- map$Value
  
  # Always include the first break (minimum value)
  adjusted_breaks <- c(breaks[1])
  
  # Iterate through the breaks starting from the second break
  for (i in 2:(length(breaks) - 1)) {
    # Check if there are any values between the previous break and the current break
    if (any(data >= breaks[i - 1] & data < breaks[i], na.rm = TRUE)) {
      # Keep the current break
      adjusted_breaks <- c(adjusted_breaks, breaks[i])
    }
  }
  
  # Always include the last break (maximum value)
  adjusted_breaks <- c(adjusted_breaks, breaks[length(breaks)])
  adjusted_breaks = unique(adjusted_breaks) #so that the last break doesn't end up in there twice
  
  return(adjusted_breaks)
}
round_to_sigfigs <- function(value, sigfigs, method = c("floor", "ceiling")) {
  method <- match.arg(method)
  if (value == 0) return(0)
  
  # Calculate the scale factor based on the significant figures
  scale_factor <- 10^(floor(log10(abs(value))) - (sigfigs - 1))
  
  if (method == "floor") {
    return(floor(value / scale_factor) * scale_factor)
  } else if (method == "ceiling") {
    return(ceiling(value / scale_factor) * scale_factor)
  }
}
append_unit <- function(dollar, unit) {
  function(x)
    paste0(dollar, comma_format()(x), unit)
}
shorten <- function(value) {
  if(is.na(value)){
    return("")
  } else if (abs(value) > 999999999) {
    return(paste0(signif(value / 1000000000, 3), "b")) #signif rounds to a given number of sigfigs
  } else if (abs(value) > 999999) {
    return(paste0(signif(value / 1000000, 3), "m"))
  } else if (abs(value) > 9999) {
    return(paste0(signif(value / 1000, 3), "k"))
  } else if (abs(value) > 10) {
    return(comma_format()(round(value, 0)))
  } else{
    return(signif(value, 3))
  }
}
```

#set_palette
```{r}
#add different palette options later
set_palette <- function(user_palette) {
  default_palette <- list(
    "high_color" = "forestgreen",
    "mid_color" = "beige",
    "low_color" = "#CC5500",
    "background_color" = "#f1e0cf",
    "title_color" = "#363c45",
    "text_color" = "#363c45",
    "highlight_color" = "steelblue",
    "na_color" = "gray90"
  )
  
  return(modifyList(default_palette, user_palette))
}
```

#get_migration_data
```{r}
get_migration_data <- function(data, region_fips, migration_type, logratio){
  #maybe some of the migration stuff can happen outside of this file
  #add option for gross migration
  
  #user supplies region_fips to specify a region, or none for total
    if(migration_type == "in"){
        if(!is.na(region_fips)[1]){
          data <- data |>
            filter(receiver_FIPS %in% region_fips, !sender_FIPS %in% region_fips)
        }
          data <- data |>
        group_by(sender_FIPS) |>
        summarize(Value = sum(flow, na.rm = T)) |>
        filter(!is.na(Value)) |>
        rename(fips = sender_FIPS)
    } else if(migration_type == "out"){
      if(!is.na(region_fips)[1]){
        data <- data |>
        filter(sender_FIPS %in% region_fips, !receiver_FIPS %in% region_fips)
      }
      data <- data |>
        group_by(receiver_FIPS) |>
        summarize(Value = sum(flow, na.rm = T))|>
        filter(!is.na(Value)) |>
        rename(fips = receiver_FIPS)
    } else if(migration_type == "net"){
      if(!is.na(region_fips)[1]){
      data <- data |>
          filter(sender_FIPS %in% region_fips, !receiver_FIPS %in% region_fips)
      } #I rewrote this without testing so it might be wrong
        data <- data |>
        group_by(receiver_FIPS) |>
        summarize(flow = sum(flow, na.rm = T),
                  counterflow = sum(counterflow, na.rm = T)) |>
        mutate(net = flow - counterflow,
               ratio = flow/counterflow,
               logratio = log(ratio)) |>
        rename(fips = receiver_FIPS)
      
      if(logratio){
        data <- data |>
          rename(Value = logratio)
      } else{
        data <- data |>
          rename(Value = net)
      }
    } else {
      stop("Migration type not recognized. Choose 'in', 'out', or 'net'")
    }
  return(data)
}
```

#merge_by_MSA
```{r}
merge_by_MSA <- function(county_map, region_fips){
   MSAs <- read.csv("MSAs_crosswalk.csv")
  
  map <- county_map |>
      left_join(MSAs, by = "fips") |>
        mutate(metro_name = if_else(is.na(metro_name), name, metro_name),
        metro_name = if_else(str_detect(county, "Ag District"), county, metro_name) #Although I won't really be using this option for Ag Maps, this still seems like good practice
        )
    if(!is.na(region_fips)[1]){
      map <- map |>
        group_by(metro_name) |>
        mutate(num_counties = n())|> #if region_fips overlaps with MSAs, we don't merge that MSA
        filter(!(fips %in% region_fips)) |> #so that partially overlapping MSAs have the right populations
      mutate(metro_name = if_else(num_counties == n(), metro_name, name)) |> #drop CBSA Title/name for counties removed because they are in region_fips)
      ungroup()
    }
  
  #there may be a better way to do this
      aggregate_cols = setdiff(colnames(map), c("fips", "county", "abbr", "state", "x", "y", "name", "geometry", "cbsa_code", "metro_name"))
      
      map <- map |>
      group_by(metro_name, cbsa_code) |> #don't really need to be grouping by CBSA code here
      summarize(
        geometry = st_union(geometry),
        #across(contains("pop"), ~sum(.x)),
        #cutoff = sum(cutoff, na.rm = T), #cutoff is almost always something that can be aggregated
        across(all_of(aggregate_cols), ~sum(.x, na.rm = T))
        ) |>
      ungroup()

    
map$centroid = st_centroid(map$geometry)
map <- map |>
  mutate(centroid = st_centroid(geometry),
         x = st_coordinates(centroid)[, 1],
         y = st_coordinates(centroid)[, 2],
         name = metro_name) |>
  select(-centroid)

return(map)
}
```